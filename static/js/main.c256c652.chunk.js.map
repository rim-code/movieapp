{"version":3,"sources":["card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","state","className","this","movies","filter","el","name","toLowerCase","includes","input","trim","rating","star","map","padEnd","src","img","Component","App","handleChange","e","setState","target","value","add","movielist","display","search","type","placeholder","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAmBeA,G,kBAjBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAIT,IAAD,OACL,OAAS,yBAAKC,UAAU,QACnBC,KAAKH,MAAMI,QAAQD,KAAKH,MAAMI,OAAOC,QAAO,SAAAC,GAAE,OAAEA,EAAGC,KAAKC,cAAcC,SAAS,EAAKT,MAAMU,MAAMF,cAAcG,SAASL,EAAGM,OAAO,EAAKZ,MAAMa,QAAMC,KAC/I,SAAAR,GAAM,OACN,yBAAKJ,UAAU,UACX,2BAAII,EAAGC,MACP,uBAAGL,UAAU,UAAU,GAAGa,OAAOT,EAAGM,OAAO,WAC3C,yBAAKI,IAAKV,EAAGW,e,GAZdC,cCoDJC,E,YAjDb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRoB,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOhB,KAAOc,EAAEE,OAAOC,SAdX,EAiBnBX,KAAK,SAACQ,GACJ,EAAKC,SAAS,CACZT,KAAKQ,KAnBU,EAsBnBI,IAAI,WACF,EAAKH,SAAU,CACbI,UAAS,sBAAO,EAAKzB,MAAMyB,WAAlB,CAA4B,CAACnB,KAAK,EAAKN,MAAMM,KAAOU,IAAI,EAAKhB,MAAMgB,IAAML,OAAO,EAAKX,MAAMW,UACpGe,SAAW,EAAK1B,MAAM0B,WAvBxB,EAAK1B,MAAQ,CACXM,KAAM,GACNU,IAAK,GACLL,OAAQ,EACRgB,OAAQ,GACRF,UAAW,GACXb,KAAM,EACNc,SAAS,GATM,E,sEA4BT,IAAD,OACP,OAAQ,6BACN,gCACE,2BAAOE,KAAK,OAAOC,YAAY,SAASC,SAAU,SAACV,GAAD,OAAO,EAAKC,SAAS,CAAEM,OAAQP,EAAEE,OAAOC,WAC1F,0BAAMQ,QAAU,kBAAI,EAAKnB,KAAK,KAA9B,UACA,0BAAMmB,QAAU,kBAAI,EAAKnB,KAAK,KAA9B,UACA,0BAAMmB,QAAU,kBAAI,EAAKnB,KAAK,KAA9B,UACA,0BAAMmB,QAAU,kBAAI,EAAKnB,KAAK,KAA9B,UACA,0BAAMmB,QAAU,kBAAI,EAAKnB,KAAK,KAA9B,WAED,kBAAC,EAAD,CAAMH,MAAQP,KAAKF,MAAM2B,OAAQf,KAAQV,KAAKF,MAAMY,KAAMT,OAAUD,KAAKF,MAAMyB,YAChF,uBAAGM,QAAU,kBAAI,EAAKV,SAAS,CAACK,SAAS,EAAK1B,MAAM0B,YAApD,KACA,yBAAKzB,UAAYC,KAAKF,MAAM0B,QAAU,UAAU,UAC9C,2BAAOE,KAAK,OAAOC,YAAY,OAAOvB,KAAK,OAAOwB,SAAU5B,KAAKiB,eACjE,2BAAOS,KAAK,OAAOC,YAAY,MAAMvB,KAAK,MAAMwB,SAAU5B,KAAKiB,eAC/D,2BAAOS,KAAK,OAAOC,YAAY,SAASvB,KAAK,SAASwB,SAAU5B,KAAKiB,eACrE,4BAAQY,QAAS7B,KAAKsB,KAAtB,a,GA7CUP,aCSEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c256c652.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Card extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( <div className=\"bloc\">\r\n            {this.props.movies&&this.props.movies.filter(el=>el.name.toLowerCase().includes(this.props.input.toLowerCase().trim())&&el.rating<this.props.star).map(\r\n                el=> {return (\r\n                <div className=\"partie\" >                       \r\n                    <p>{el.name}</p>\r\n                    <p className=\"etoile\">{\"\".padEnd(el.rating,\"⭐\")}</p>\r\n                    <img src={el.img}/>\r\n                </div>\r\n            )})}\r\n        </div> );\r\n    }\r\n}\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport Card from './card';\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      img: \"\",\r\n      rating: 0,\r\n      search: \"\",\r\n      movielist: [],\r\n      star: 5,\r\n      display :false\r\n    }\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  star=(e)=> {\r\n    this.setState({\r\n      star:e\r\n    })\r\n  }\r\n  add=()=> {\r\n    this.setState ({\r\n      movielist : [...this.state.movielist,{name:this.state.name , img:this.state.img , rating:this.state.rating}], \r\n      display : !this.state.display\r\n    })\r\n  }\r\n  render() {\r\n    return (<div>\r\n      <header>\r\n        <input type='text' placeholder=\"Search\" onChange={(e) => this.setState({ search: e.target.value })} />\r\n        <span onClick ={()=>this.star(1)}>⭐</span>\r\n        <span onClick ={()=>this.star(2)}>⭐</span>\r\n        <span onClick ={()=>this.star(3)}>⭐</span>\r\n        <span onClick ={()=>this.star(4)}>⭐</span>\r\n        <span onClick ={()=>this.star(5)}>⭐</span>\r\n      </header>\r\n       <Card input ={this.state.search} star = {this.state.star} movies = {this.state.movielist} />\r\n      <p onClick ={()=>this.setState({display:!this.state.display})}>+</p>\r\n      <div className ={this.state.display ? \"display\":\"hidden\"}>\r\n        <input type=\"text\" placeholder=\"name\" name=\"name\" onChange={this.handleChange} />\r\n        <input type=\"text\" placeholder=\"Img\" name=\"img\" onChange={this.handleChange} />\r\n        <input type=\"text\" placeholder=\"rating\" name=\"rating\" onChange={this.handleChange} />\r\n        <button onClick={this.add}>Add</button>\r\n      </div>\r\n    </div>);\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}